package _1_binary_search;

public class _12_wood_cut {
	/**
	 * @param L: Given n pieces of wood with length L[i]
	 * @param k: An integer
	 * @return: The maximum length of the small pieces
	 */
	public int woodCut(int[] L, int k) {
		// write your code here
		if (L == null || L.length == 0) {
			return 0;
		}
		int maxLength = findMaxLength(L);
		int start = 1, end = maxLength;
		while (start + 1 < end) {
			int mid = start + (end - start) / 2;
			int num = calculateNumOfWood(L, mid);
			if (num >= k) {
				start = mid;
			} else {
				end = mid;
			}
		}
		if (calculateNumOfWood(L, end) >= k) {
			return end;
		} else if (calculateNumOfWood(L, start) >= k) {
			return start;
		}
		return 0;
	}

	public int findMaxLength(int[] L) {
		int minLength = L[0];
		for (int i = 0; i <= L.length - 1; i++) {
			minLength = Math.max(minLength, L[i]);
		}
		return minLength;
	}

	public int calculateNumOfWood(int[] L, int length) {
		int num = 0;
		for (int i = 0; i <= L.length - 1; i++) {
			num += L[i] / length;
		}
		return num;
	}

	public static void main(String args[]) {
		int[] L = { 6, 6, 5, 5, 6, 5, 4, 4, 5, 6, 6, 6, 5, 4, 5, 6, 5, 6, 4, 4, 4, 4, 6, 4, 5, 5, 4, 6, 6, 6, 6, 4, 6,
				4, 4, 5, 6, 5, 5, 4, 6, 4, 6, 4, 4, 6, 4, 5, 6, 5, 6, 6, 5, 4, 4, 5, 6, 4, 5, 5, 5, 6, 6, 4, 4, 5, 5, 6,
				5, 5, 6, 4, 6, 4, 5, 6, 4, 4, 4, 6, 4, 6, 4, 5, 4, 6, 5, 6, 6, 5, 4, 4, 6, 5, 6, 5, 6, 4, 4, 6, 4, 6, 5,
				4, 4, 4, 4, 6, 6, 4, 6, 6, 6, 5, 4, 4, 6, 4, 4, 4, 5, 4, 6, 4, 6, 6, 4, 5, 6, 5, 6, 5, 4, 5, 5, 5, 4, 6,
				5, 4, 5, 6, 4, 4, 6, 6, 5, 6, 6, 4, 6, 5, 6, 5, 4, 6, 4, 6, 4, 6, 5, 6, 4, 6, 6, 4, 5, 4, 6, 6, 5, 6, 6,
				5, 4, 4, 4, 4, 4, 5, 5, 4, 6, 5, 4, 6, 4, 6, 5, 6, 6, 5, 4, 5, 6, 4, 4, 6, 5, 5, 6, 6, 6, 4, 6, 6, 5, 6,
				5, 4, 6, 5, 4, 6, 5, 6, 4, 5, 4, 4, 5, 4, 5, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 4, 4, 5, 5, 6, 6, 5,
				6, 6, 6, 4, 5, 5, 4, 6, 4, 6, 4, 4, 6, 5, 6, 6, 6, 5, 4, 4, 4, 6, 4, 6, 4, 5, 6, 6, 4, 5, 6, 6, 6, 6, 6,
				4, 5, 6, 4, 4, 4, 4, 5, 5, 5, 6, 5, 5, 5, 4, 4, 5, 6, 6, 4, 6, 6, 6, 4, 5, 4, 6, 5, 6, 5, 5, 6, 5, 4, 5,
				4, 6, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 6, 4, 5, 6, 5, 6, 5, 6, 4, 4, 5, 6, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6,
				6, 4, 5, 5, 4, 5, 5, 5, 4, 6, 5, 5, 4, 6, 5, 6, 6, 6, 4, 4, 4, 6, 4, 6, 6, 4, 5, 4, 5, 6, 6, 6, 5, 6, 4,
				6, 6, 5, 6, 5, 6, 4, 4, 6, 4, 6, 5, 6, 6, 5, 4, 6, 5, 6, 6, 5, 6, 6, 4, 6, 6, 5, 6, 5, 6, 4, 5, 5, 5, 6,
				6, 4, 5, 4, 4, 6, 4, 6, 6, 5, 6, 6, 6, 5, 6, 6, 4, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 4, 6, 5, 6,
				5, 6, 5, 5, 6, 5, 4, 5, 6, 5, 4, 6, 5, 5, 4, 5, 4, 5, 6, 5, 6, 4, 6, 5, 4, 4, 4, 5, 5, 4, 5, 4, 6, 4, 5,
				5, 6, 5, 6, 6, 5, 4, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 4, 5, 4, 6, 6, 5, 6, 5, 6, 6, 4, 5, 5,
				5, 5, 6, 6, 4, 4, 5, 6, 5, 5, 6, 4, 6, 6, 5, 5, 6, 4, 4, 4, 4, 5, 4, 5, 4, 5, 5, 4, 5, 5, 5, 4, 6, 4, 4,
				4, 5, 4, 4, 5, 4, 6, 6, 5, 6, 4, 4, 6, 6, 4, 4, 5, 6, 5, 5, 4, 6, 6, 4, 6, 5, 4, 5, 5, 6, 6, 6, 4, 6, 6,
				5, 6, 4, 5, 6, 4, 6, 4, 5, 5, 4, 4, 6, 6, 6, 4, 6, 5, 5, 4, 5, 5, 4, 5, 6, 6, 6, 4, 5, 4, 5, 6, 4, 6, 4,
				5, 4, 5, 4, 6, 6, 6, 5, 4, 6, 4, 6, 4, 5, 6, 5, 6, 6, 6, 5, 4, 5, 6, 6, 6, 6, 4, 5, 6, 5, 4, 4, 5, 5, 4,
				4, 4, 5, 4, 6, 6, 6, 6, 4, 5, 5, 4, 5, 4, 5, 4, 4, 6, 4, 5, 5, 6, 4, 6, 5, 4, 6, 4, 6, 5, 5, 6, 5, 4, 4,
				5, 4, 4, 5, 5, 5, 5, 4, 4, 5, 6, 4, 4, 6, 6, 5, 4, 6, 5, 5, 4, 4, 6, 4, 6, 4, 5, 6, 4, 5, 4, 6, 5, 4, 4,
				5, 6, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 6, 4, 4, 5, 6, 5, 4, 5, 4, 4, 5, 6, 5, 5, 4, 4, 4,
				6, 6, 6, 6, 6, 4, 5, 4, 4, 4, 4, 5, 6, 4, 4, 5, 5, 6, 6, 6, 6, 4, 6, 6, 5, 4, 6, 4, 5, 4, 5, 5, 4, 6, 6,
				4, 6, 4, 5, 4, 5, 5, 4, 6, 5, 5, 4, 4, 6, 6, 5, 5, 4, 6, 5, 5, 6, 6, 4, 6, 6, 4, 6, 6, 4, 5, 6, 6, 5, 4,
				5, 4, 5, 5, 5, 4, 6, 5, 4, 6, 5, 4, 4, 5, 6, 5, 5, 6, 4, 4, 6, 4, 4, 5, 4, 5, 5, 4, 5, 5, 4, 4, 6, 4, 5,
				6, 4, 4, 5, 6, 6, 4, 5, 4, 6, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 4, 6, 5, 4, 6, 5, 4, 5, 4, 5, 4, 6, 4, 6, 6,
				4, 5, 6, 4, 4, 6, 5, 4, 4, 5, 6, 6, 4, 6, 6, 4, 6, 5, 6, 6, 4, 4, 5, 5, 6, 5, 4, 4, 5, 4, 5, 4, 4, 6, 4,
				4, 4, 4, 4, 4, 6, 6, 6, 5, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 5, 6, 4, 6, 5, 4, 5, 4, 5, 4, 6, 5, 5, 4, 5, 6,
				5, 4, 5, 5, 6, 4, 6, 5, 6, 4, 6, 6, 5, 6, 4, 4, 4, 5, 4, 6, 4, 4, 4, 5, 4, 5, 4, 6, 4, 4, 5, 4, 5, 6, 4,
				6, 6, 5, 4, 5, 4, 5, 6, 4, 5, 6, 4, 5, 4, 5, 5, 4, 4, 5, 4, 5, 6, 5, 4, 5, 5, 6, 4, 5, 5, 4, 6, 6, 6, 5,
				5, 5, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 4, 4, 5, 6, 4, 4, 5, 6, 5, 5, 5, 6, 6, 5, 4, 6, 6, 5, 4, 5, 6,
				4, 4, 6, 4, 6, 4, 4, 5, 4, 5, 4, 5, 4, 6, 4, 5, 5, 6, 5, 5, 4, 6, 6, 4, 6, 5, 5, 5, 6, 5, 4, 5, 6, 6, 4,
				6, 6, 4, 5, 6, 4, 6, 4, 5, 4, 4, 6, 5, 5, 4, 6, 5, 4, 6, 6, 4, 4, 5, 6, 4, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5,
				4, 4, 5, 4, 4, 5, 6, 5, 4, 6, 6, 6, 5, 6, 5, 4, 5, 4, 6, 6, 5, 6, 5, 4, 4, 5, 4, 4, 4, 6, 4, 5, 5, 4, 4,
				5, 4, 5, 5, 5, 5, 5, 6, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 6, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 6, 4, 6, 4, 5, 5,
				6, 5, 5, 6, 4, 4, 5, 5, 6, 5, 4, 4, 4, 4, 4, 6, 5, 4, 5, 6, 4, 4, 6, 4, 4, 4, 6, 4, 4, 6, 5, 6, 6, 6, 5,
				6, 5, 4, 5, 4, 5, 5, 6, 5, 6, 4, 6, 5, 6, 4, 4, 6, 6, 4, 4, 5, 5, 5, 5, 5, 4, 6, 4, 5, 4, 4, 4, 4, 5, 6,
				4, 4, 5, 4, 5, 5, 6, 6, 5, 6, 6, 5, 6, 6, 5, 5, 4, 5, 4, 5, 5, 5, 4, 4, 6, 5, 4, 6, 6, 6, 4, 4, 6, 5, 6,
				5, 6, 6, 4, 5, 6, 6, 6, 4, 4, 4, 5, 4, 4, 6, 5, 5, 6, 4, 6, 4, 6, 4, 4, 4, 5, 6, 6, 6, 6, 5, 6, 5, 5, 4,
				4, 6, 4, 6, 4, 4, 6, 6, 5, 4, 4, 6, 5, 4, 5, 4, 4, 6, 6, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 5, 6, 4, 6, 5, 6,
				5, 5, 5, 5, 6, 5, 6, 6, 4, 6, 6, 6, 6, 4, 5, 6, 5, 6, 4, 6, 6, 5, 5, 4, 4, 6, 4, 4, 5, 4, 4, 5, 6, 6, 4,
				4, 6, 6, 6, 4, 5, 4, 5, 6, 6, 5, 6, 4, 5, 5, 5, 4, 4, 4, 5, 4, 5, 5, 5, 5, 4, 4, 5, 5, 6, 4, 6, 5, 5, 4,
				4, 6, 6, 5, 6, 4, 4, 6, 4, 6, 4, 6, 4, 4, 4, 6, 5, 6, 4, 6, 5, 4, 4, 6, 4, 6, 6, 4, 5, 6, 6, 4, 4, 4, 4,
				6, 5, 4, 4, 5, 5, 6, 6, 5, 4, 4, 4, 6, 6, 5, 5, 5, 6, 4, 5, 4, 5, 5, 4, 4, 6, 5, 4, 5, 4, 6, 5, 6, 5, 4,
				4, 6, 4, 5, 6, 5, 4, 5, 4, 5, 4, 4, 5, 6, 5, 6, 5, 4, 5, 4, 4, 5, 6, 4, 6, 4, 6, 4, 5, 4, 4, 6, 5, 5, 5,
				4, 5, 6, 4, 5, 4, 4, 6, 5, 5, 6, 5, 6, 6, 4, 4, 6, 6, 6, 6, 4, 6, 4, 4, 5, 4, 4, 4, 6, 6, 5, 4, 6, 4, 6,
				6, 6, 5, 4, 5, 6, 5, 5, 5, 5, 5, 4, 4, 6, 4, 5, 5, 5, 5, 5, 5, 5, 4, 6, 4, 6, 6, 4, 5, 4, 4, 6, 5, 6, 5,
				4, 4, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 5, 4, 4, 4, 5, 4, 6, 6, 5, 5, 4, 6, 5, 6, 6, 5, 4, 4, 5, 4, 6, 5, 4,
				6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 4, 4, 4, 4, 5, 4, 5, 4, 4, 6, 6, 6, 6, 6, 6, 5, 5, 5,
				5, 5, 5, 4, 5, 4, 6, 4, 4, 5, 5, 5, 6, 6, 5, 6, 5, 4, 4, 4, 6, 6, 5, 6, 4, 5, 5, 6, 6, 4, 5, 5, 4, 5, 5,
				4, 5, 6, 5, 6, 5, 6, 6, 5, 5, 4, 5, 4, 5, 6, 5, 5, 5, 4, 4, 6, 5, 5, 4, 4, 6, 6, 6, 6, 5, 6, 6, 4, 5, 5,
				4, 5, 4, 4, 4, 4, 5, 6, 6, 5, 4, 4, 4, 5, 6, 5, 5, 4, 4, 6, 5, 4, 6, 4, 4, 4, 4, 5, 6, 4, 5, 5, 4, 5, 4,
				5, 6, 5, 5, 4, 5, 6, 4, 5, 4, 4, 4, 6, 5, 4, 5, 6, 4, 5, 4, 4, 4, 5, 5, 5, 6, 6, 4, 4, 6, 6, 4, 4, 5, 5,
				6, 4, 6, 6, 6, 6, 4, 5, 6, 4, 6, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 4, 6, 5, 4, 4, 6, 6, 6, 6, 6, 4,
				5, 4, 6, 4, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 4, 5, 4, 5, 4, 5, 6, 5, 4, 5, 5, 6, 4, 4, 6, 6, 6, 6, 5,
				5, 6, 4, 6, 4, 6, 6, 6, 6, 4, 6, 5, 4, 6, 4, 4, 5, 6, 6, 6, 6, 4, 5, 6, 4, 6, 4, 4, 4, 6, 6, 4, 5, 6, 4,
				6, 6, 5, 6, 6, 6, 5, 5, 4, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 4, 5, 6, 5, 4, 4, 5, 4, 5, 5, 4,
				4, 6, 4, 4, 6, 4, 5 };
		int k = 128;
		_12_wood_cut obj = new _12_wood_cut();
		int result = obj.woodCut(L, k);
		System.out.print(result);
	}
}
